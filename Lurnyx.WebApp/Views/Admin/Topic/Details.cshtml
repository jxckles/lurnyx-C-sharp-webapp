@model Lurnyx.Services.ServiceModels.TopicDto
@{
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
    ViewData["Title"] = Model.Title;
}

<div class="w-full mx-auto bg-white rounded-xl shadow-sm overflow-hidden mb-8">
    <!-- Header -->
    <div class="flex justify-between items-center p-6">
        <h1 class="text-2xl font-bold text-[#022b3a]">Topic Details</h1>
        <a href="@Url.Action("Index")"
            class="text-sm font-medium text-gray-600 hover:text-gray-900 transition-colors flex items-center">
            View Topic List
        </a>
    </div>

    <!-- Hero Image with Gradient Overlay -->
    <div class="relative">
        <img class="w-full h-72 object-cover"
            src="@(!string.IsNullOrEmpty(Model.CoverImageUrl) ? Model.CoverImageUrl : "https://placehold.co/384x288?text=No+Image")"
            alt="Cover image for @Model.Title" />
        <div class="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent"></div>
        <div class="absolute bottom-4 right-4">
            <a href="@Url.Action("Edit", "Topic", new { id = @Model.Id })"
                class="text-sm font-medium bg-[#1F7A8C] text-white py-2.5 px-5 rounded-lg flex items-center cursor-pointer hover:bg-[#2FA3BA] transition-colors duration-200 shadow-md hover:shadow-lg">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24
                    24" stroke="currentColor">

                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                        d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                Edit Topic
            </a>
        </div>
        <!-- Title and Tags -->
        <div class="absolute bottom-6 left-6 space-y-4">
            @if (Model.Training != null)
            {
                <div class="flex flex-wrap gap-2">
                    <div class="flex items-center bg-[#bfdbf7]/90 rounded-md px-3 py-3 max-w-lg">
                        <i class="fa-solid fa-layer-group w-5 text-center mr-2 text-[#022b3a]"></i>
                        <span class="text-sm font-medium text-[#022b3a]">@Model.Training.Title</span>
                    </div>
                    @if (Model.Training.TrainingCategory != null)
                    {
                        <div class="flex items-center bg-[#1f7a8c]/90 rounded-md px-3 py-3 max-w-lg">
                            <i class="fa-solid fa-chalkboard-user w-5 text-center mr-2 text-white"></i>
                            <span class="text-sm font-medium text-white">@Model.Training.TrainingCategory.Name</span>
                        </div>
                    }
                </div>
            }
            <h2 class="text-3xl font-bold text-white max-w-4xl">@Model.Title</h2>
        </div>
    </div>

    <!-- Author Info -->
    <div class="flex items-center p-6 gap-4 border-b">
        @if (Model.UpdatedByUser != null)
        {
            <div class="w-14 h-14 bg-gray-200 rounded-full flex items-center justify-center">
                <img class="w-full object-cover rounded-full"
                    src=@(!string.IsNullOrEmpty(Model.UpdatedByUser?.ProfileImageUrl) ? Model.UpdatedByUser?.ProfileImageUrl
                                    : Url.Content("~/img/avatar.png")) alt="User Avatar">
            </div>
            <div>
                <p class="text-base font-medium text-gray-900">@Model.UpdatedByUser.FirstName @Model.UpdatedByUser.LastName
                </p>
                <!-- Aligning the date format based on HLD document -->
                <p class="text-sm font-light text-gray-600">Updated: @Model.UpdatedAt.ToString("MM/dd/yyyy")</p>
            </div>
        }
        <div class="ml-auto flex items-center text-gray-600">
            <i class="fas fa-paperclip h-4 w-4 mr-1"></i>
            <span class="text-sm">@Model.ResourceMaterials.Count @(@Model.ResourceMaterials.Count < 2 ? "Attachment" :
                                "Attachments")</span>
        </div>
    </div>

    <!-- Tab Navigation -->
    <div class="flex border-b">
        <button id="overviewTab" onclick="showTab('overview')"
            class="flex-1 py-4 font-semibold text-center text-gray-700 border-b-2 border-[#022b3a]">
            Overview
        </button>
        <button id="resourcesTab" onclick="showTab('resources')"
            class="flex-1 py-4 font-semibold text-center text-gray-500 hover:text-gray-700 transition-colors">
            Resources
        </button>
    </div>

    <!-- Tab Content -->
    <div id="overviewContent" class="p-6">
        <h3 class="text-xl font-bold text-[#022b3a] mb-4">Description</h3>
        <p class="text-gray-700 leading-relaxed">
            @Model.Description
        </p>
    </div>

    <div id="resourcesContent" class="hidden p-6">
        @if (!Model.ResourceMaterials.Any())
        {
            <div class="text-center py-12">
                <i class="fas fa-folder-open text-4xl text-gray-300 mb-4"></i>
                <h3 class="text-xl font-medium text-gray-500">No Resources Found</h3>
                <p class="text-gray-400">There are no resource materials attached to this topic.</p>
            </div>
        }
        else
        {
            var groupedResources = Model.ResourceMaterials.GroupBy(r => r.FileType);

            @foreach (var group in groupedResources)
            {
                <div class="mb-8">
                    <div class="flex items-center mb-4 space-x-2">
                        <i class="@GetIconForFileType(group.Key) text-xl text-[#022b3a]"></i>
                        <h3 class="text-lg font-bold text-[#022b3a]">@group.Key (@group.Count())</h3>
                    </div>

                    <div class="space-y-3">
                        @foreach (var resource in group)
                        {
                            <div class="flex items-center border border-gray-200 rounded-lg p-3">
                                <div class="w-12 h-12 bg-gray-100 rounded flex items-center justify-center mr-4">
                                    <i class="@GetIconForFileType(resource.FileType) text-2xl text-gray-500"></i>
                                </div>
                                <div class="flex-1">
                                    <p class="text-sm font-medium text-gray-800">@resource.Name</p>
                                    <p class="text-xs text-gray-500">@FormatFileSize(resource.FileSize)</p>
                                </div>
                                <div class="flex gap-4 mr-2">
                                    <a href="@resource.FileAccessUrl" target="_blank" class="text-gray-500 hover:text-blue-600"
                                        title="View/Open">
                                        <i class="fas fa-external-link-alt"></i>
                                    </a>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

@functions {
    private string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "";
        var i = (int)Math.Floor(Math.Log(bytes) / Math.Log(1024));
        return string.Concat(Math.Round(bytes / Math.Pow(1024, i), 2), " ", new[] { "Bytes", "KB", "MB", "GB", "TB" }[i]);
    }

    private string GetIconForFileType(string fileType)
    {
        return fileType?.ToUpper() switch
        {
            "PDF" => "fas fa-file-pdf",
            "PPTX" => "fas fa-file-powerpoint",
            "PNG" or "JPG" or "JPEG" or "WEBP" => "fas fa-file-image",
            "MP4" => "fas fa-file-video",
            _ => "fas fa-file-alt",
        };
    }
}

@section Scripts {
    <partial name="_ToastError" />

    <script>
        function showTab(tabName) {
            const overviewTab = document.getElementById('overviewTab');
            const resourcesTab = document.getElementById('resourcesTab');
            const overviewContent = document.getElementById('overviewContent');
            const resourcesContent = document.getElementById('resourcesContent');

            const activeClasses = ['text-gray-700', 'border-b-2', 'border-[#022b3a]'];
            const inactiveClasses = ['text-gray-500', 'hover:text-gray-700'];

            if (tabName === 'overview') {
                overviewTab.classList.remove(...inactiveClasses);
                overviewTab.classList.add(...activeClasses);
                resourcesTab.classList.remove(...activeClasses);
                resourcesTab.classList.add(...inactiveClasses);
                overviewContent.classList.remove('hidden');
                resourcesContent.classList.add('hidden');
            } else {
                resourcesTab.classList.remove(...inactiveClasses);
                resourcesTab.classList.add(...activeClasses);
                overviewTab.classList.remove(...activeClasses);
                overviewTab.classList.add(...inactiveClasses);
                resourcesContent.classList.remove('hidden');
                overviewContent.classList.add('hidden');
            }
        }

        // Set initial state
        document.addEventListener('DOMContentLoaded', () => {
            showTab('overview');
        });
    </script>
}
