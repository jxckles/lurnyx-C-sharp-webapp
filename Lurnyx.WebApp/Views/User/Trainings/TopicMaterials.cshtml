@model Lurnyx.Services.ServiceModels.TopicDto
@{
    ViewData["Title"] = "Lurnyx Training Materials";
}

@section styles {
    <link rel="stylesheet" href="~/css/output.css?v=1.0.0" />
}

<div>
    <!-- Background Wave for Dark Mode -->
    <img src="~/img/BackgroundWave2.svg"
         class="fixed inset-0 w-screen h-screen object-cover opacity-0 dark:opacity-100 transition-opacity duration-300 -z-10 pointer-events-none"
         alt="background wave">
</div>

<div class="min-h-screen p-8 dark:text-gray-100">
    <!-- Main container with fade-in animation -->
    <div class="max-w-7xl mx-auto bg-white dark:bg-gray-800/30 rounded-xl border border-gray-200 dark:border-white/20 shadow-sm backdrop-blur-sm transition-all duration-500 transform opacity-0 animate-fade-in">

        <!-- Header with breadcrumb navigation - slide down animation -->
        <div class="flex items-center justify-between p-6 transition-all duration-500 transform opacity-0 animate-fade-in-down">
            <div class="flex items-center text-lg text-gray-500 dark:text-gray-400">
                 <a href="@Url.Action("Index", "Trainings")" class="hover:text-blue-600 dark:hover:text-[#1DE6D0] transition-colors">Trainings</a>
                <span class="mx-2">/</span>
                <a href="@Url.Action("Training", "Trainings", new { id = Model.TrainingId })" class="hover:text-blue-600 dark:hover:text-[#1DE6D0] transition-colors">@Model.Training.Title</a>
                <span class="mx-2">/</span>
                <span class="text-[#022B3A]  dark:text-[#1DE6D0] font-semibold">@Model.Title</span>
            </div>

            <!-- Back button -->
            <button onclick="window.history.back()"
               class="text-gray-600 dark:text-gray-300 hover:text-gray-800 hover:cursor-pointer dark:hover:text-white">
                <img src="~/img/backbutton.svg" alt="Back Button" class="h-[33px] w-[27px] dark:hidden" />
                <img src="~/img/backbuttondark.svg" alt="Back Button" class="h-[33px] w-[27px] hidden dark:block" />
            </button>
        </div>

        <!-- Main content -->
        <div class="px-8 pb-8">
            <!-- Dynamic content when data exists -->
            <div>
                <!-- Topic Header - fade in with delay -->
                <div class="flex items-center justify-between mb-6 transition-all duration-500 transform opacity-0 animate-fade-in animate-delay-100">
                    <h2 class="text-3xl font-bold text-gray-900 dark:text-white">@Model.Title</h2>
                    <!-- This container will be updated by JavaScript -->
                    <span id="topic-status-check-container">
                        @if (Model.IsCompletedByUser) 
                        {
                            <img src="~/img/trainingmaterials_img/green-topic-status-check.svg" alt="Completed" class="h-6 w-6" />
                        }
                        else {
                            <img src="~/img/trainingmaterials_img/gray-topic-status-check.svg" alt="Not Completed" class="h-5 w-5" />
                        }
                    </span>
                </div>
                
                <!-- Cover Image Section - staggered animations -->
                <div class="w-full flex flex-col md:flex-row items-start justify-start mb-4">
                    <div class="w-full md:w-1/2 aspect-video rounded-lg overflow-hidden p-4 transition-all duration-500 transform opacity-0 animate-fade-in-left animate-delay-200">
                        @if (!string.IsNullOrEmpty(Model.CoverImageUrl))
                        {
                            <img src="@Model.CoverImageUrl" 
                                alt="@Model.Title" 
                                class="w-full h-full object-cover rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300" />
                        }
                        else
                        {
                            <img src="https://placehold.co/1600x900/EBF4F6/022B3A?text=No+Image" 
                                alt="No image available" 
                                class="w-full h-full object-cover rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300" />
                        }
                    </div>
                    <p class="w-full md:w-1/2 text-gray-700 dark:text-gray-300 text-lg p-4 transition-all duration-500 transform opacity-0 animate-fade-in-right animate-delay-200">
                        @Model.Description
                    </p>
                </div>

                @if (Model == null || Model.ResourceMaterials?.Any() != true)
                {
                    <!-- Empty state - fade in with delay -->
                    <div class="text-center py-8 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg transition-all duration-500 transform opacity-0 animate-fade-in animate-delay-300">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <h3 class="mt-2 text-lg font-medium text-gray-700 dark:text-gray-300">No resources available</h3>
                        <p class="mt-1 text-gray-500 dark:text-gray-400">You can complete this topic now or check back later.</p>

                        <a href="@Url.Action("MarkTopicAsComplete", "Trainings", new { topicId = Model.Id, trainingId = Model.TrainingId })"
                        class="inline-block mt-6 px-6 py-2.5 bg-[#1F7A8C] text-white font-medium text-sm leading-tight uppercase rounded-lg shadow-md hover:bg-[#2FA3BA] hover:shadow-lg focus:bg-[#2FA3BA] focus:shadow-lg focus:outline-none focus:ring-0 active:bg-[#1A6A7A] active:shadow-lg transition duration-150 ease-in-out">
                            Mark as Complete
                        </a>
                    </div>
                }
                else
                {
                    <!-- Resource Materials - staggered grid animation -->
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-8">
                        @foreach (var resource in Model.ResourceMaterials)
                        {
                            <div class="border border-gray-200 dark:border-gray-700 rounded-lg p-6 hover:shadow-md transition-all duration-300 transform opacity-0 animate-fade-in-up"
                                 style="animation-delay: @(100 * Model.ResourceMaterials.IndexOf(resource))ms">
                                <div class="flex justify-between items-start gap-2">
                                    <div class="flex items-start gap-4 min-w-0">
                                        @{
                                            var icon = GetIconForFileType(resource.FileType);
                                        }
                                        <img src="~/img/trainingmaterials_img/@icon" alt="@resource.FileType" class="h-10 w-10 flex-shrink-0" />
                                        <div class="min-w-0">
                                            <h3 class="text-xl font-semibold text-gray-900 dark:text-white truncate">@resource.Name</h3>
                                            <p class="text-gray-600 dark:text-gray-400">
                                                @FormatFileSize(resource.FileSize)
                                            </p>
                                        </div>
                                    </div>
                                    <span id="check-container-@resource.Id" class="resource-status-check flex-shrink-0 ml-2">
                                        @if (resource.IsDownloaded)
                                        {
                                            <img src="~/img/trainingmaterials_img/green-file-status-check.svg" alt="Completed" class="h-5 w-5" />
                                        }
                                        else
                                        {
                                            <img src="~/img/trainingmaterials_img/gray-file-status-check.svg" alt="Not Completed" class="h-5 w-5" />
                                        }
                                    </span>
                                </div>

                                <div class="flex gap-3 mt-4">
                                    <a href="@Url.Action("ViewResource", "Trainings", new { 
                                            resourceId = resource.Id, 
                                            topicId = Model.Id, 
                                            trainingId = Model.TrainingId,
                                            redirectUrl = resource.FileAccessUrl 
                                    })" 
                                    target="_blank"
                                    class="resource-link flex-1 bg-[#1F7A8C] dark:bg-[#BFDBF7] text-white dark:text-[#022B3A] rounded-lg font-medium py-2 px-auto mx-auto hover:bg-[#2FA3BA] dark:hover:bg-[#A0C4E0] transition-colors text-center"
                                    data-resource-id="@resource.Id">
                                        View
                                    </a>
                                    @if (resource.FileType != "URL")
                                    {
                                        <a href="@Url.Action("DownloadResource", "Trainings", new { 
                                                    resourceId = resource.Id, 
                                                    topicId = Model.Id, 
                                                    trainingId = Model.TrainingId, 
                                                    fileUrl = resource.FileAccessUrl, 
                                                    fileName = $"{resource.Name}.{resource.FileType.ToLower()}" 
                                            })" 
                                        title="Download"
                                        class="resource-link flex-1 border border-[#1F7A8C] dark:border-[#1DE6D0] text-[#1F7A8C] dark:text-[#1DE6D0] rounded-lg font-medium py-2 px-4 hover:bg-gray-50 dark:hover:bg-gray-700/30 transition-colors text-center"
                                        data-resource-id="@resource.Id">
                                            Download
                                        </a>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section scripts {
    <partial name="_ToastError" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const resourceLinks = document.querySelectorAll('.resource-link');
            const topicStatusContainer = document.getElementById('topic-status-check-container');
            const greenTopicCheckHtml = `<img src="/img/trainingmaterials_img/green-topic-status-check.svg" alt="Completed" class="h-6 w-6" />`;
            const greenFileCheckHtml = `<img src="/img/trainingmaterials_img/green-file-status-check.svg" alt="Completed" class="h-5 w-5" />`;

            function checkIfTopicIsComplete() {
                const allResourceChecks = document.querySelectorAll('.resource-status-check');
                if (allResourceChecks.length === 0) return;

                let completedCount = 0;
                allResourceChecks.forEach(container => {
                    if (container.querySelector('img[src*="green-file-status-check.svg"]')) {
                        completedCount++;
                    }
                });

                if (completedCount === allResourceChecks.length) {
                    topicStatusContainer.innerHTML = greenTopicCheckHtml;
                }
            }

            resourceLinks.forEach(link => {
                link.addEventListener('click', function () {
                    const resourceId = this.dataset.resourceId;
                    const checkContainer = document.getElementById('check-container-' + resourceId);

                    if (checkContainer) {
                        if (!checkContainer.querySelector('img[src*="green-file-status-check.svg"]')) {
                            checkContainer.innerHTML = greenFileCheckHtml;
                            setTimeout(checkIfTopicIsComplete, 0);
                        }
                    }
                });
            });

            checkIfTopicIsComplete();
        });
    </script>
    
    <style>
        /* Animation classes */
        .animate-fade-in {
            animation: fadeIn 0.6s ease-out forwards;
        }
        
        .animate-fade-in-down {
            animation: fadeInDown 0.6s ease-out forwards;
        }
        
        .animate-fade-in-left {
            animation: fadeInLeft 0.6s ease-out forwards;
        }
        
        .animate-fade-in-right {
            animation: fadeInRight 0.6s ease-out forwards;
        }
        
        .animate-fade-in-up {
            animation: fadeInUp 0.6s ease-out forwards;
        }
        
        /* Animation delays */
        .animate-delay-100 {
            animation-delay: 0.1s;
        }
        
        .animate-delay-200 {
            animation-delay: 0.2s;
        }
        
        .animate-delay-300 {
            animation-delay: 0.3s;
        }
        
        /* Keyframes */
        @@keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @@keyframes fadeInDown {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @@keyframes fadeInLeft {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        @@keyframes fadeInRight {
            from {
                opacity: 0;
                transform: translateX(20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
}

@functions {
    private string FormatFileSize(long bytes)
    {
        if (bytes == 0) return "";
        var i = (int)Math.Floor(Math.Log(bytes) / Math.Log(1024));
        return string.Concat(Math.Round(bytes / Math.Pow(1024, i), 2), " ", new[] { "Bytes", "KB", "MB", "GB", "TB" }[i]);
    }

    private string GetIconForFileType(string fileType)
    {
        return fileType?.ToUpper() switch
        {
            "PDF" => "pdf-icon.svg",
            "PPPT" or "PPTX" => "ppt-icon.svg",
            "MP4" => "video-icon.svg",
            "JPG" or "PNG" or "WEBP" => "png-icons.svg",
            _ => "link-icon.svg"
        };
    }
}