@using Lurnyx.Services.ServiceModels
@using static Lurnyx.Resources.Constants.Enums
@model Lurnyx.WebApp.Models.TrainingProgressDetailViewModel
@{
    ViewData["Title"] = "Lurnyx Training";

    var hasTopics = Model.Training.Topics != null && Model.Training.Topics.Any();
    var isCompleted = Model.Progress.IsCompleted;
    string formattedDuration(int durationInMinutes)
    {
        return durationInMinutes < 60 ? $"{durationInMinutes} mins" : $"{durationInMinutes / 60} hr {durationInMinutes % 60} mins";
    }
}

@section styles {
    <link rel="stylesheet" href="~/css/output.css?v=1.0.0" />
}

<div>
    <!-- Background Wave -->
    <img src="~/img/BackgroundWave2.svg"
         class="fixed inset-0 w-screen h-screen object-cover opacity-0 dark:opacity-100 transition-opacity duration-300 -z-10 pointer-events-none"
         alt="background wave">
</div>

<div class="min-h-screen p-4 sm:p-8 dark:text-gray-100">
    <!-- Main container with fade-in animation -->
    <div class="max-w-7xl mx-auto bg-white dark:bg-gray-800/30 rounded-xl border border-gray-200 dark:border-white/20 shadow-sm backdrop-blur-sm p-6 sm:p-8 transition-all duration-500 transform opacity-0 animate-fade-in">

        <!-- Header with breadcrumb - slide up animation -->
        <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6 transition-all duration-500 transform opacity-0 animate-fade-in-up">
            <div>
                <div class="flex items-center text-lg text-gray-500 dark:text-gray-400 mb-2">
                    <a href="@Url.Action("Index", "Trainings")" class="hover:text-blue-600 dark:hover:text-[#1DE6D0] transition-colors">Trainings</a>
                    <span class="mx-2">/</span>
                    <span class="text-[#022B3A]  dark:text-[#1DE6D0] font-semibold">@Model.Training.Title</span>
                </div>
                <h1 class="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-900 dark:text-white">Training Details</h1>
            </div>
            <button onclick="window.history.back()" class="text-gray-600 dark:text-gray-300 hover:cursor-pointer hover:text-gray-800 dark:hover:text-white">
                <img src="~/img/backbutton.svg" alt="Back Button" class="h-[33px] w-[27px] dark:hidden" />
                <img src="~/img/backbuttondark.svg" alt="Back Button" class="h-[33px] w-[27px] hidden dark:block" />
            </button>
        </div>

        <!-- Main content -->
        <div class="px-4 sm:px-8 pb-8">
            <!-- Training header section - staggered animations -->
            <div class="flex flex-col md:flex-row gap-8 mb-8">
                <!-- Training image - fade in left -->
                <div class="w-full md:w-1/3 transition-all duration-500 transform opacity-0 animate-fade-in-left">
                    <img src="@(!string.IsNullOrEmpty(Model.Training.CoverImageUrl) ? Model.Training.CoverImageUrl : "https://placehold.co/400x400/EBF4F6/022B3A?text=No+Image")" alt="@Model.Training.Title"
                         class="w-full h-64 object-cover rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300" />
                </div>

                <!-- Training details - fade in right -->
                <div class="w-full md:w-2/3 transition-all duration-500 transform opacity-0 animate-fade-in-right">
                    <div class="flex flex-col h-full justify-start gap-3">
                        <div>
                            <h1 class="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-2">@Model.Training.Title</h1>
                            <p class="text-lg text-gray-600 dark:text-gray-300 mb-6">by @Model.Training.Author</p>

                            <!-- Meta information -->
                            <div class="flex flex-wrap items-center gap-4 mb-2">
                                <span class="bg-blue-100 dark:bg-[#022B3A] text-blue-800 dark:text-[#BFDBF7] text-sm font-medium px-4 py-1 rounded-full">
                                    @(Model.Training.TrainingCategory?.Name ?? "Unassigned")
                                </span>
                                <div class="flex items-center text-gray-600 dark:text-white">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    <span class="text-sm">Uploaded: @Model.Training.CreatedAt.ToString("MM/dd/yyyy")</span>
                                </div>
                                <div class="flex items-center text-gray-600 dark:text-white">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                    </svg>
                                    <span class="text-sm">Views: @Model.Training.ViewCount</span>
                                </div>
                            </div>
                        </div>

                        <!-- Training Badge -->
                        <div class="flex items-center gap-2 mb-4">
                            <span class="bg-[#caffda] text-[#4db16f] dark:text-[#00551c] px-3 py-1 rounded-full text-s mfont-medium">@(Model.Progress.IsCompleted ? "COMPLETED" : (Model.Progress.Status?.ToString() ?? "VIEWED"))</span>
                        </div>
                        <!-- Action buttons -->
                        <div class="flex flex-col items-start gap-4">
                            <div class="flex flex-col sm:flex-row gap-4 w-full">
                                @{
                                    var isEnrolledOrStarted = Model.Progress.IsEnrolled || Model.Progress.IsStarted;
                                    var isButtonDisabled = !hasTopics || isCompleted;
                                    var buttonHref = isButtonDisabled ? "#" : (isEnrolledOrStarted ? "#topics" : Url.Action("EnrollTraining", "Trainings", new { id = Model.Training.Id }));
                                }
                                <a id="trainings"
                                   href="@buttonHref"
                                   class="flex-1 bg-[#1F7A8C] dark:bg-[#022B3A] text-white dark:text-[#BFDBF7] px-6 py-3 rounded-lg font-semibold flex items-center justify-center transition-colors
                                        @(!isButtonDisabled ? "cursor-pointer hover:bg-[#2FA3BA] dark:hover:bg-[#1C4858]" : "opacity-50 cursor-not-allowed")"
                                   title="@(isCompleted ? "You have already completed this training." : (hasTopics ? (isEnrolledOrStarted ? "Continue Training" : "Enroll Training") : "Enrollment unavailable: No topics yet."))"
                                   @(isButtonDisabled ? "aria-disabled=true tabindex=-1" : "")>

                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        @if (isCompleted)
                                        {
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        }
                                        else
                                        {
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        }
                                    </svg>
                                    @(isCompleted ? "Training Completed" : (isEnrolledOrStarted ? "Continue Training" : "Enroll Training"))
                                </a>

                                <button id="rateTrainingButton"
                                        class="flex-1 border-2 border-[#1F7A8C] dark:border-[#1DE6D0] text-[#1F7A8C] dark:text-[#1DE6D0] px-6 py-3 rounded-lg font-semibold flex items-center justify-center transition-colors @(!isCompleted ? "opacity-50 cursor-not-allowed" : "hover:bg-blue-50 dark:hover:bg-[#14b8a6]/10")"
                                        title="@(!isCompleted ? "You must complete the training before rating." : (@Model.Training.UserRating.HasExistingRating ? "Update your rating" : "Rate this training"))"
                                        @(!isCompleted ? "disabled" : "")>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.539-1.118l1.518-4.674a1 1 0 00-.364-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                    </svg>
                                    @(@Model.Training.UserRating.HasExistingRating ? "Update Rating" : "Rate Training")
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Stats section - fade in up with delay -->
            <div class="border-t border-gray-200 dark:border-white/20 pt-8 mb-8 transition-all duration-500 transform opacity-0 animate-fade-in-up animate-delay-100">
                <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
                    <!-- Average Rating -->
                    <div class="text-center">
                        <p class="text-2xl font-bold text-gray-900 dark:text-white mb-1">@Model.Training.AverageRating.ToString("0.00")</p>
                        <p class="text-gray-600 dark:text-[#BFDBF7] mb-2">Average Rating</p>
                        <div class="flex justify-center">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <svg class="w-5 h-5 @(i <= Model.Training.AverageRating ? "text-yellow-400" : "text-gray-300 dark:text-gray-600")" fill="currentColor" viewBox="0 0 20 20">
                                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                </svg>
                            }
                        </div>
                    </div>

                    <!-- Total Ratings -->
                    <div class="text-center">
                        <p class="text-2xl font-bold text-gray-900 dark:text-white mb-1">@Model.Training.RatingCount</p>
                        <p class="text-gray-600 dark:text-[#BFDBF7]">Total Ratings</p>
                    </div>

                    <!-- Duration -->
                    <div class="text-center">
                        <p class="text-2xl font-bold text-gray-900 dark:text-white mb-1">@formattedDuration(Model.Training.Topics.Sum(t => t.DurationInMinutes))</p>
                        <p class="text-gray-600 dark:text-[#BFDBF7]">Duration</p>
                    </div>

                    <!-- Level -->
                    <div class="text-center">
                        <p class="text-2xl font-bold text-gray-900 dark:text-white mb-1">@Model.Training.Difficulty.ToString()[0]@Model.Training.Difficulty.ToString().ToLower().Substring(1)</p>
                        <p class="text-gray-600 dark:text-[#BFDBF7]">Level</p>
                    </div>
                </div>
            </div>

            <!-- Content section - fade in up with delay -->
            <div class="border-t border-gray-200 dark:border-white/20 pt-8 mb-8 transition-all duration-500 transform opacity-0 animate-fade-in-up animate-delay-200">
                <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">About This Training</h2>
                <div class="bg-white dark:bg-gray-800/40 rounded-lg overflow-hidden border border-gray-200 dark:border-white/20">
                    <div class="p-6">
                        <p class="text-gray-700 dark:text-[#BFDBF7]">
                            @Model.Training.Description
                        </p>
                    </div>
                </div>
            </div>

            <!-- Topics section - fade in up with delay -->
            <div id="topics" class="border-t border-gray-200 dark:border-white/20 pt-8 transition-all duration-500 transform opacity-0 animate-fade-in-up animate-delay-300">
                <div class="flex justify-between items-center mb-6">
                    <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Topics</h2>
                    <span class="text-sm text-gray-500 dark:text-gray-400">
                        @Model.Training.Topics.Count @(Model.Training.Topics.Count < 2 ? "topic" : "topics")
                    </span>
                </div>

                @if (Model.Training.Topics.Count == 0)
                {
                    <div class="text-center py-8 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400 dark:text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                        </svg>
                        <h3 class="mt-2 text-lg font-medium text-gray-700 dark:text-gray-300">No topics available</h3>
                        <p class="mt-1 text-gray-500 dark:text-gray-400">Check back later for updates</p>
                    </div>
                }
                else
                {
                    <div class="grid gap-4">
                        @foreach (var topic in Model.Training.Topics.OrderBy(t => t.Order))
                        {
                            var isDisabled = Model.Training.UserTrainingProgress == null || Model.Training.UserTrainingProgress.Status.ToString() == "VIEWED";

                            <a href="@(isDisabled ? "#" : Url.Action("TopicMaterials", "Trainings", new { id = @topic.Id, trainingId = @Model.Training.Id }))"
                               id="topic-@topic.Id"
                               class="group block bg-white dark:bg-gray-800 rounded-lg border p-6 transition-all hover:shadow-md hover:opacity-100 opacity-90 cursor-pointer active:scale-[0.98]
                                                @(topic.IsCompletedByUser ? "border-green-500 dark:border-green-400" : "border-gray-200 dark:border-gray-700 hover:border-primary-500 dark:hover:border-primary-400")
                                                @(isDisabled ? "pointer-events-none opacity-70" : "")"
                               @(isDisabled ? "aria-disabled=true tabindex=-1" : "")>
                                <div class="flex justify-between items-start gap-4">
                                    <div class="flex-1 min-w-0">
                                        <h3 class="text-lg font-semibold text-gray-900 dark:text-white truncate">@topic.Title</h3>
                                        <p class="text-gray-600 dark:text-gray-300 mt-2 line-clamp-2">@topic.Description</p>
                                    </div>
                                    <div class="flex items-center gap-3 shrink-0">
                                        <span class="inline-flex items-center gap-1 text-sm font-medium text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-700/60 px-2.5 py-1 rounded-full">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                            @formattedDuration(topic.DurationInMinutes)
                                        </span>
                                        <span class="text-gray-300 dark:text-gray-600 group-hover:text-primary-500 dark:group-hover:text-primary-400 transition-colors">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                                            </svg>
                                        </span>
                                    </div>
                                </div>
                            </a>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Rating Modal -->
<div id="ratingModal" class="fixed inset-0 z-50 flex items-center justify-center hidden">
    <!-- Overlay -->
    <div class="absolute inset-0 bg-black/40 backdrop-blur-sm"></div>

    <!-- Modal Box -->
    <div class="relative z-10 bg-white dark:bg-gray-900 rounded-2xl shadow-2xl border border-gray-200 dark:border-white/10 px-6 py-8 sm:p-8 w-full max-w-md mx-4 transition-all">
        <!-- Header -->
        <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white">@(@Model.Training.UserRating.HasExistingRating ? "Update Rating" : "Rate Training")</h3>
            <button id="closeRatingModal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 transition">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
        </div>

        <!-- Rating Form -->
        <form id="ratingForm" asp-action="SubmitRating" asp-controller="TrainingRatings" method="post">
            @Html.AntiForgeryToken()
            <input type="hidden" name="trainingId" value="@Model.Training.Id" />
            <input type="hidden" name="ratingValue" id="ratingValue" value="@(Model.Training.UserRating.HasExistingRating? Model.Training.UserRating.ExistingRating : 5)" />

            <!-- Star Rating -->
            <div class="flex flex-col items-center gap-4 mb-6">
                <div class="flex justify-center gap-2" id="starRating">
                    @{
                        // Determine the initial rating to display
                        var initialRating = Model.Training.UserRating.HasExistingRating
                        ? Model.Training.UserRating.Rating
                        : 5;

                        // Ensure rating is at least 1 star
                        initialRating = Math.Max(1, initialRating);

                        @for (int i = 1; i <= 5; i++)
                        {
                            <svg class="w-10 h-10 @(i <= initialRating ? "text-yellow-400" : "text-gray-300 dark:text-gray-700") hover:scale-110 transition-transform duration-150 cursor-pointer rating-star"
                                 data-rating="@i" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                            </svg>
                        }
                    }
                </div>
            </div>

            <!-- Review Comment -->
            <div class="mb-6">
                <label for="comment" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Your Review (Optional)</label>
                <textarea name="comment" id="comment" asp-for="@Model.Training.UserRating.Comments" maxlength="500"
                          class="w-full min-h-[100px] border border-gray-300 dark:border-gray-600 rounded-lg p-3 text-gray-900 dark:text-white dark:bg-gray-800 focus:ring-2 focus:ring-[#1f7a8c] focus:border-transparent resize-none transition-colors duration-200"
                          placeholder="Share your experience...">@Model.Training.UserRating.ExistingComments</textarea>
                <p id="charCount" class="text-xs text-gray-500 dark:text-gray-400 mt-1">@(Model.Training.UserRating.ExistingComments?.Length ?? 0)/500 characters</p>
            </div>

            <!-- Submit Button -->
            <button type="submit" id="submitRatingButton"
                    class="w-full py-3 rounded-lg font-semibold bg-[#1F7A8C] hover:bg-[#2FA3BA] text-white dark:bg-[#022B3A] dark:hover:bg-[#1C4858] dark:text-[#BFDBF7] transition-colors">
                @(Model.Training.UserRating.HasExistingRating ? "Update Rating" : "Submit Rating")
            </button>
        </form>
    </div>
</div>


@section scripts {
    <partial name="_ToastError" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Modal elements
            const ratingModal = document.getElementById('ratingModal');
            const closeRatingModal = document.getElementById('closeRatingModal');
            const rateTrainingButton = document.getElementById('rateTrainingButton');

            // Rating form elements
            const stars = document.querySelectorAll('.rating-star');
            const ratingValue = document.getElementById('ratingValue');
            const reviewComment = document.getElementById('comment');
            const charCount = document.getElementById('charCount');
            const starRatingContainer = document.getElementById('starRating');

            // Initialize with server-side rating (default to 5 if no rating exists)
            const initialRating = @(Model.Training.UserRating.HasExistingRating? Model.Training.UserRating.Rating : 5);
            let currentRating = Math.max(1, initialRating); // Ensure minimum 1 star
            ratingValue.value = currentRating;

            // Initialize stars with current rating
            updateStars(currentRating);

            // Star rating interaction
            stars.forEach(star => {
                star.addEventListener('click', function() {
                    currentRating = parseInt(this.getAttribute('data-rating'));
                    ratingValue.value = currentRating;
                    updateStars(currentRating);
                });

                star.addEventListener('mouseover', function() {
                    const hoverRating = parseInt(this.getAttribute('data-rating'));
                    updateStars(hoverRating, false);
                });
            });

            // Reset stars to current rating on mouseout
            starRatingContainer.addEventListener('mouseleave', function() {
                updateStars(currentRating);
            });

            // Character count for comments
            if (reviewComment) {
                reviewComment.addEventListener('input', function() {
                    charCount.textContent = `${this.value.length}/500 characters`;
                });
            }

            // Modal toggle - always show current saved rating
            if (rateTrainingButton) {
                rateTrainingButton.addEventListener('click', () => {
                    // Get fresh rating from server when opening modal
                    // Make sure to use the same property name as above
                    const freshRating = @(Model.Training.UserRating.HasExistingRating? Model.Training.UserRating.Rating : 5);
                    currentRating = Math.max(1, freshRating); // Ensure minimum 1 star
                    ratingValue.value = currentRating;
                    updateStars(currentRating);
                    ratingModal.classList.remove('hidden');
                });
            }

            closeRatingModal.addEventListener('click', () => {
                ratingModal.classList.add('hidden');
            });

            // Close modal when clicking outside
            ratingModal.addEventListener('click', function(e) {
                if (e.target === ratingModal) {
                    ratingModal.classList.add('hidden');
                }
            });

            function updateStars(rating, persist = true) {
                stars.forEach(star => {
                    const starValue = parseInt(star.getAttribute('data-rating'));
                    if (starValue <= rating) {
                        star.classList.add('text-yellow-400');
                        star.classList.remove('text-gray-300', 'dark:text-gray-700');
                    } else {
                        star.classList.remove('text-yellow-400');
                        star.classList.add('text-gray-300', 'dark:text-gray-700');
                    }
                });

                if (persist) {
                    ratingValue.value = rating;
                }
            }
        });
    </script>

    <style>
        /* Animation classes */
        .animate-fade-in {
            animation: fadeIn 0.6s ease-out forwards;
        }

        .animate-fade-in-up {
            animation: fadeInUp 0.6s ease-out forwards;
        }

        .animate-fade-in-left {
            animation: fadeInLeft 0.6s ease-out forwards;
        }

        .animate-fade-in-right {
            animation: fadeInRight 0.6s ease-out forwards;
        }

        /* Animation delays */
        .animate-delay-100 {
            animation-delay: 0.1s;
        }

        .animate-delay-200 {
            animation-delay: 0.2s;
        }

        .animate-delay-300 {
            animation-delay: 0.3s;
        }

        /* Keyframes */
        @@keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @@keyframes fadeInLeft {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        @@keyframes fadeInRight {
            from {
                opacity: 0;
                transform: translateX(20px);
            }

            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
    </style>
}