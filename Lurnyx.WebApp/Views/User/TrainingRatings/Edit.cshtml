@model Lurnyx.Services.ServiceModels.TrainingRatingDto
@{
    ViewData["Title"] = "Edit Ratings";
}

@section styles {
    <link rel="stylesheet" href="~/css/output.css?v=1.0.0" />
}

<!-- Background Wave for Dark Mode -->
<div>
    <img src="~/img/BackgroundWave2.svg"
         class="fixed inset-0 w-screen h-screen object-cover opacity-0 dark:opacity-100 transition-opacity duration-300 -z-10 pointer-events-none"
         alt="background wave">
</div>

<!-- Main container with fade-in animation -->
<div class="min-h-screen container mx-auto px-4 sm:px-6 pb-12 dark:text-gray-100">
    <!-- Breadcrumb with fade-in-down animation -->
    <div class="h-16 border-b border-gray-300 dark:border-white/20 flex items-center text-base font-normal text-lg transition-all duration-500 transform opacity-0 animate-fade-in-down">
        <a asp-controller="TrainingRatings" asp-action="Index"
           class="text-gray-500 dark:text-gray-400 hover:text-blue-600 dark:hover:text-[#1DE6D0] transition-colors">
            <span>My Ratings</span>
        </a>
        <span class="text-slate-500 dark:text-gray-400 mx-2">/</span>
        <span class="text-[#022B3A] dark:text-[#1DE6D0] font-semibold">Edit Your Rating</span>
    </div>

    <!-- Header Section with fade-in-down animation -->
    <div class="mt-6 transition-all duration-500 transform opacity-0 animate-fade-in-down" style="animation-delay: 100ms">
        <h1 class="text-2xl sm:text-3xl font-bold text-gray-900 dark:text-white">Edit Your Rating</h1>
        <p class="text-[#64748b] dark:text-blue-200 mt-1 sm:mt-2">Update your rating and review for this training course</p>
    </div>

    <!-- Form for Editing Rating with fade-in-up animation -->
    <form asp-action="Edit" asp-controller="TrainingRatings" method="post"
          class="grid grid-cols-1 lg:grid-cols-5 gap-6 sm:gap-8 mt-8 transition-all duration-500 transform opacity-0 animate-fade-in-up">
        <input type="hidden" asp-for="Id" />
        <input type="hidden" asp-for="TrainingId" />
        <input type="hidden" asp-for="Training.Id" />
        <input type="hidden" asp-for="Training.Title" />
        <input type="hidden" asp-for="Training.Author" />
        <input type="hidden" asp-for="Training.TrainingCategory.Name" />
        <input type="hidden" asp-for="Training.CoverImageUrl" />

        <!-- Training Info Card -->
        <div class="lg:col-span-2">
            <div class="bg-white dark:bg-teal-900/20 rounded-lg border border-[#f3f4f6] dark:border-white/20 p-6 shadow-sm backdrop-blur-sm h-full transition-all duration-200 hover:shadow-md hover:border-[#1F7A8C]/30">
                <div class="flex flex-col items-center gap-4 sm:gap-6">
                    <!-- Image -->
                    <img src="@(Model.Training?.CoverImageUrl ?? "~/img/placeholder_img/react-training-2.svg")"
                         alt="@Model.Training?.Title"
                         class="object-cover w-full h-40 sm:h-48 rounded-lg transform transition-transform duration-300"
                         loading="lazy" />

                    <!-- Info -->
                    <div class="w-full space-y-2 sm:space-y-3">
                        <span class="inline-block px-3 py-1 bg-[#bfe5f0] dark:bg-[#1F7A8C] text-[#022b3a] dark:text-white text-sm rounded-full font-medium">
                            @(Model.Training?.TrainingCategory?.Name ?? "Unassigned")
                        </span>
                        <h2 class="text-lg sm:text-xl font-semibold text-gray-900 dark:text-white mt-1 sm:mt-2">
                            @Model.Training?.Title
                        </h2>
                        <p class="text-[#64748b] line-clamp-1 dark:text-blue-200">@Model.Training?.Description</p>

                        <!-- Current Rating Display -->
                        <div class="mt-3 sm:mt-4 flex items-center">
                            <div class="flex mr-2">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <svg class="w-4 h-4 sm:w-5 sm:h-5 @(i <= Model.Rating ? "text-yellow-400" : "text-gray-300 dark:text-gray-500")"
                                         fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                                        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                                    </svg>
                                }
                            </div>
                            <span class="text-gray-700 dark:text-white font-medium">@Model.Rating.ToString("0.0")</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Rating & Review Section -->
        <div class="lg:col-span-3">
            <div class="bg-white dark:bg-teal-900/20 rounded-lg border border-[#f3f4f6] dark:border-white/20 p-6 shadow-sm backdrop-blur-sm space-y-4 sm:space-y-6 transition-all duration-200 hover:shadow-md hover:border-[#1F7A8C]/30">
                <h3 class="text-lg sm:text-xl font-semibold text-gray-900 dark:text-white">Your Rating & Review</h3>

                <!-- Editable Star Rating -->
                <div>
                    <label class="block text-[#64748b] dark:text-blue-200 mb-2 sm:mb-3">Overall Rating</label>
                    <div class="flex items-center gap-3 sm:gap-4">
                        <div class="flex gap-1 sm:gap-2 flex-shrink-0" id="starRating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <button type="button"
                                        class="star-wrapper cursor-pointer w-6 h-6 sm:w-8 sm:h-8 relative focus:outline-none focus:ring-2 focus:ring-[#1F7A8C] focus:ring-offset-2 rounded-full"
                                        data-star="@i" aria-label="Rate @i star" onclick="setRating(@i)">
                                    <svg class="w-full h-full star-empty @(i > Model.Rating ? "" : "hidden") text-gray-300 dark:text-gray-500"
                                         fill="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                    </svg>
                                    <svg class="w-full h-full star-filled absolute top-0 left-0 @(i <= Model.Rating ? "" : "hidden") text-yellow-400"
                                         fill="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                                    </svg>
                                </button>
                            }
                        </div>
                        <span class="text-xl sm:text-2xl font-medium text-gray-700 dark:text-white"
                              id="ratingValue">@Model.Rating.ToString("0.0")</span>
                        <input type="hidden" asp-for="Rating" id="ratingInput" />
                    </div>
                    <p class="text-xs sm:text-sm text-[#64748b] dark:text-blue-200 mt-1 sm:mt-2">
                        Click on the stars
                        to rate this course
                    </p>
                </div>

                <!-- Review -->
                <div>
                    <label asp-for="Comments" class="block text-[#64748b] dark:text-blue-200 mb-2 sm:mb-3">
                        Your
                        Review
                    </label>
                    <textarea asp-for="Comments" maxlength="500"
                              class="w-full min-h-[120px] sm:min-h-[160px] border border-gray-300 dark:border-white/20 rounded-lg p-3 sm:p-4 text-gray-900 dark:text-white dark:bg-gray-800/30 focus:ring-2 focus:ring-[#1f7a8c] focus:border-transparent resize-none transition-colors duration-200"
                              placeholder="Share your experience..."></textarea>
                    <p id="charCount" class="text-xs sm:text-sm text-[#64748b] dark:text-blue-200 mt-1 sm:mt-2">
                        @(Model.Comments?.Length ?? 0)/500 characters
                    </p>
                </div>
            </div>
        </div>

        <!-- Action Buttons with fade-in animation -->
        <div class="flex flex-col sm:flex-row justify-end gap-3 sm:gap-4 mt-6 sm:mt-8 lg:col-span-5 transition-all duration-500 transform opacity-0 animate-fade-in" style="animation-delay: 200ms">
            <a asp-controller="TrainingRatings" asp-action="Index"
               class="px-4 sm:px-6 py-2 sm:py-3 border border-gray-300 dark:border-white/20 rounded-lg text-gray-700 dark:text-white text-sm sm:text-base font-medium hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-[#1F7A8C] focus:ring-offset-2">
                <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                     aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                          d="M6 18L18 6M6 6l12 12" />
                </svg>
                Cancel
            </a>
            <button type="submit"
                    class="px-4 sm:px-6 py-2 sm:py-3 bg-[#1f7a8c] hover:bg-[#2FA3BA] dark:bg-[#022B3A] dark:hover:bg-[#1C4858] text-white text-sm sm:text-base font-medium rounded-lg transition-colors flex items-center justify-center focus:outline-none focus:ring-2 focus:ring-[#1F7A8C] focus:ring-offset-2">
                <svg class="w-4 h-4 sm:w-5 sm:h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                     aria-hidden="true">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                Save Changes
            </button>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ToastError" />
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Initialize rating display
            const ratingInput = document.getElementById('ratingInput');
            const ratingValue = document.getElementById('ratingValue');
            const starWrappers = document.querySelectorAll('.star-wrapper');

            // Character count for comments
            const textarea = document.getElementById('Comments');
            const charCount = document.getElementById('charCount');

            function updateCharCount() {
                const count = textarea.value.length;
                charCount.textContent = `${count}/500 characters`;
            }

            textarea.addEventListener('input', updateCharCount);
            updateCharCount(); // Initialize

            // Set up hover effects for stars
            starWrappers.forEach(star => {
                star.addEventListener('mouseover', (e) => {
                    const hoverRating = parseInt(star.dataset.star);
                    highlightStars(hoverRating);
                });

                star.addEventListener('mouseout', (e) => {
                    const currentRating = parseInt(ratingInput.value);
                    highlightStars(currentRating);
                });
            });
        });

        function setRating(rating) {
            const ratingInput = document.getElementById('ratingInput');
            const ratingValue = document.getElementById('ratingValue');

            ratingInput.value = rating;
            ratingValue.textContent = `${rating}.0`;
            highlightStars(rating);
        }

        function highlightStars(rating) {
            const starWrappers = document.querySelectorAll('.star-wrapper');

            starWrappers.forEach((star, index) => {
                const starIndex = index + 1;
                const empty = star.querySelector('.star-empty');
                const filled = star.querySelector('.star-filled');

                if (starIndex <= rating) {
                    empty.classList.add('hidden');
                    filled.classList.remove('hidden');
                } else {
                    empty.classList.remove('hidden');
                    filled.classList.add('hidden');
                }
            });
        }
    </script>
}

<style>
    /* Animation classes - same as in Ratings page */
    .animate-fade-in {
        animation: fadeIn 0.6s ease-out forwards;
    }

    .animate-fade-in-down {
        animation: fadeInDown 0.6s ease-out forwards;
    }

    .animate-fade-in-up {
        animation: fadeInUp 0.6s ease-out forwards;
    }

    /* Keyframes */
    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>