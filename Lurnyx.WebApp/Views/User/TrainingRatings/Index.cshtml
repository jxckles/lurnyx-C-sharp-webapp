@{
    ViewData["Title"] = "User Ratings";
}

@section styles {
    <link rel="stylesheet" href="~/css/output.css?v=1.0.0" />
}

<!-- Background Wave for Dark Mode -->
<div>
    <img src="~/img/BackgroundWave2.svg"
         class="fixed inset-0 w-screen h-screen object-cover opacity-0 dark:opacity-100 transition-opacity duration-300 -z-10 pointer-events-none"
         alt="background wave">
</div>

<!-- Main container with fade-in animation -->
<div class="container mx-auto px-6 py-8 dark:text-gray-100">
    <!-- Header Section with fade-in-down animation -->
    <div class="mb-8 transition-all duration-500 transform opacity-0 animate-fade-in-down">
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white">My Ratings</h1>
        <p class="text-gray-500 dark:text-blue-200 mt-2">View and manage your training course ratings</p>
    </div>

    <!-- Ratings Filter Bar with fade-in-up animation -->
    <form method="get" asp-action="Index" asp-controller="TrainingRatings"
          class="bg-white dark:bg-gray-800/30 rounded-lg border border-[#f3f4f6] dark:border-white/20 p-6 shadow-sm backdrop-blur-sm mb-8 transition-all duration-500 transform opacity-0 animate-fade-in-up">
        <div class="flex flex-col md:flex-row gap-4 items-center">
            <!-- Search Input with Clear Button -->
            <div class="relative flex-grow">
                <input type="text" name="searchQuery" placeholder="Search training..."
                       class="w-full h-12 px-4 pr-12 rounded-lg border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700/50 dark:text-white peer"
                       value="@Model.CurrentSearchQuery"
                       id="ratingsSearchInput">

                <!-- Search Icon (hidden when input has value) -->
                <div class="absolute right-4 top-3 peer-[&:not(:placeholder-shown)]:hidden">
                    <svg class="w-5 h-5 text-gray-400 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>

                <!-- Clear Button (only visible when there's text) -->
                <button type="button" onclick="clearRatingsSearchBar()"
                        class="absolute right-3 top-3 text-gray-400 hover:text-gray-600 dark:hover:text-gray-200 hidden peer-[&:not(:placeholder-shown)]:block">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                </button>
            </div>

            <!-- Filter by Ratings -->
            <div class="relative">
                <select name="ratingFilter" id="ratingsRatingFilter"
                        class="h-11 px-4 pr-8 rounded-lg border border-gray-300 appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full shadow-sm bg-white text-gray-700 transition-all duration-200 dark:border-gray-600 appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700/50 dark:text-white">
                    <option value="">Filter by ratings</option>
                    @for (int i = 5; i >= 1; i--)
                    {
                        <option value="@i" selected="@(Model.CurrentRatingFilter == i.ToString())">
                            @(i == 5 ? $"{i} Stars" : $"{i}+ Stars")
                        </option>
                    }
                </select>
                <div class="absolute right-3 top-3 pointer-events-none">
                    <svg class="w-5 h-5 text-gray-400 dark:text-gray-300" fill="none" stroke="currentColor"
                         viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </div>
            </div>

            <!-- Filter by Categories -->
            <div class="relative">
                <select name="categoryFilter" id="ratingsCategoryFilter"
                        class="h-11 px-4 pr-8 rounded-lg border border-gray-300 appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-full shadow-sm bg-white text-gray-700 transition-all duration-200 dark:border-gray-600 appearance-none focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700/50 dark:text-white">
                    <option value="">Filter by Categories</option>
                    @foreach (var category in Model.AllCategories)
                    {
                        <option value="@category.Name" selected="@(Model.CurrentCategoryFilter == category.Name)">
                            @category.Name
                        </option>
                    }
                </select>
                <div class="absolute right-3 top-3 pointer-events-none">
                    <svg class="w-5 h-5 text-gray-400 dark:text-gray-300" fill="none" stroke="currentColor"
                         viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex gap-2">
                <button type="submit"
                        class="h-12 px-6 bg-[#1f7a8c] hover:bg-[#2FA3BA] dark:bg-[#2A8793] dark:hover:bg-[#3BADBC] text-white rounded-lg transition-colors cursor-pointer">
                    Search
                </button>

                @if (!string.IsNullOrEmpty(Model.CurrentSearchQuery) || !string.IsNullOrEmpty(Model.CurrentRatingFilter) || !string.IsNullOrEmpty(Model.CurrentCategoryFilter))
                {
                    <button type="button" onclick="clearAllRatingsFilters()"
                            class="h-12 px-4 flex items-center border border-[#1f7a8c] dark:border-white text-[#1f7a8c] dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700/50 rounded-lg transition-colors cursor-pointer">
                        Clear All
                    </button>
                }
            </div>
        </div>
    </form>

    <!-- Rating Cards Grid -->
    <div class="grid gap-6">
        @if (Model.TrainingRatings.Items.Count == 0)
        {
            <!-- Empty state with fade-in animation -->
            <div class="bg-white dark:bg-gray-800/30 rounded-xl border border-[#f3f4f6] dark:border-white/20 p-8 text-center backdrop-blur-sm transition-all duration-500 transform opacity-0 animate-fade-in">
                <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">No Ratings Found</h3>
                <p class="text-gray-600 dark:text-blue-200 max-w-md mx-auto mb-2">
                    You haven't rated any trainings yet. Rate trainings to see them appear here.
                </p>
            </div>
        }
        else
        {
            @foreach (var rating in Model.TrainingRatings.Items)
            {
                <!-- Rating card with staggered fade-in-up animation -->
                <div class="flex flex-col md:flex-row items-center gap-3 sm:gap-4 bg-white dark:bg-gray-800/30 rounded-lg border border-[#f3f4f6] dark:border-white/20 shadow-sm overflow-hidden p-4 sm:p-5 backdrop-blur-sm transition-all duration-300 transform opacity-0 animate-fade-in-up hover:shadow-md hover:border-[#1F7A8C]/30"
                     style="animation-delay: @(100 * Model.TrainingRatings.Items.IndexOf(rating))ms">
                    <!-- Course Image -->
                    <div class="w-full md:w-64 h-40 md:h-40 rounded-lg overflow-hidden shadow-md hover:shadow-lg transition-shadow duration-300">
                        <img src="@(rating.Training?.CoverImageUrl ?? "https://placehold.co/400x200/EBF4F6/022B3A?text=No+Image")"
                             alt="@rating.Training?.Title"
                             class="object-cover w-full h-full transform transition-transform duration-300"
                             loading="lazy" />
                    </div>

                    <!-- Rating Content -->
                    <div class="flex-grow w-full grid gap-1 sm:gap-2">
                        <!-- Title and Category -->
                        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-1">
                            <h2 class="text-xl font-semibold text-gray-900 dark:text-white">@rating.Training?.Title</h2>
                            <div class="w-fit bg-[#bfe5f0] dark:bg-[#1F7A8C] rounded-lg px-3 py-1.5 flex items-center border border-gray-200 dark:border-white/20 shadow-sm hover:shadow transition-shadow">
                                <span class="text-[#022b3a] dark:text-white text-sm font-medium tracking-wide">
                                    @(rating.Training?.TrainingCategory?.Name ?? "Unassigned")
                                </span>
                            </div>
                        </div>

                        <!-- Star Rating -->
                        <div class="flex items-center gap-1 rating-group -mt-1">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <div class="star-wrapper w-4 h-4 sm:w-5 sm:h-5 relative">
                                    <img src="~/img/star-rating-empty.svg"
                                         class="w-full h-full @(i <= rating.Rating ? "hidden" : "")" />
                                    <img src="~/img/star-rating-filled-yellow.svg"
                                         class="w-full h-full absolute top-0 left-0 @(i <= rating.Rating ? "" : "hidden")" />
                                </div>
                            }
                            <span class="text-sm font-medium text-gray-600 dark:text-blue-200 ml-2">@rating.Rating.0</span>
                        </div>

                        <!-- Comment -->
                        <p class="text-sm sm:text-base text-gray-600 dark:text-blue-200 sm:mt-2 line-clamp-2">
                            @rating.Comments
                        </p>

                        <!-- Action Buttons -->
                        <div class="mt-4 flex gap-2">
                            <a href="@Url.Action("Edit", "TrainingRatings", new { id = rating.Id })"
                               class="bg-[#1F7A8C] dark:bg-[#022B3A] text-white dark:text-[#BFDBF7] px-4 py-2 rounded-lg flex items-center text-base cursor-pointer hover:bg-[#2FA3BA] dark:hover:bg-[#1C4858] transition-colors">
                                <img src="~/img/edit-button.svg" alt="Edit Icon" class="mr-2 h-4 w-4" />
                                Edit Rating
                            </a>
                            <a href="@Url.Action("Training", "Trainings", new { id = rating.TrainingId })"
                               class="border-2 border-[#1F7A8C] dark:border-[#1DE6D0] text-[#1F7A8C] dark:text-[#1DE6D0] hover:bg-blue-50 dark:hover:bg-[#14b8a6]/10 px-4 py-2 rounded-lg flex items-center text-base cursor-pointer transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24"
                                     stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" />
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                View Training
                            </a>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Pagination with fade-in animation -->
    @if (Model.TrainingRatings != null && Model.TrainingRatings.TotalPages > 1)
    {
        <div class="flex justify-center items-center gap-2 my-8 mt-8 transition-all duration-500 transform opacity-0 animate-fade-in">
            <!-- Previous Button -->
            <a asp-action="Index" asp-route-searchQuery="@Model.CurrentSearchQuery"
               asp-route-ratingFilter="@Model.CurrentRatingFilter" asp-route-categoryFilter="@Model.CurrentCategoryFilter"
               asp-route-page="@(Model.TrainingRatings.PageNumber - 1)"
               class="w-10 h-10 flex items-center justify-center rounded-lg border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors @(Model.TrainingRatings.HasPreviousPage ? "" : "opacity-50 pointer-events-none")">
                <svg class="w-5 h-5 text-gray-500 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
            </a>

            <!-- Always show first page -->
            <a asp-action="Index" asp-route-searchQuery="@Model.CurrentSearchQuery"
               asp-route-ratingFilter="@Model.CurrentRatingFilter" asp-route-categoryFilter="@Model.CurrentCategoryFilter"
               asp-route-page="1"
               class="w-10 h-10 flex items-center justify-center rounded-lg transition-colors @(1 == Model.TrainingRatings.PageNumber ? "bg-[#1f7a8c] dark:bg-[#02465E] text-white" : "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700/50")">
                1
            </a>

            @if (Model.TrainingRatings.PageNumber > 3)
            {
                <span class="w-10 h-10 flex items-center justify-center rounded-lg bg-white dark:bg-gray-800/30 border border-gray-300 dark:border-gray-600 text-gray-500 dark:text-blue-200">
                    ...
                </span>
            }

            @{
                int startPage = Math.Max(2, Model.TrainingRatings.PageNumber - 1);
                int endPage = Math.Min(Model.TrainingRatings.TotalPages - 1, Model.TrainingRatings.PageNumber + 1);

                for (int i = startPage; i <= endPage; i++)
                {
                    <a asp-action="Index" asp-route-searchQuery="@Model.CurrentSearchQuery"
                       asp-route-ratingFilter="@Model.CurrentRatingFilter" asp-route-categoryFilter="@Model.CurrentCategoryFilter"
                       asp-route-page="@i"
                       class="w-10 h-10 flex items-center justify-center rounded-lg transition-colors @(i == Model.TrainingRatings.PageNumber ? "bg-[#1f7a8c] dark:bg-[#02465E] text-white" : "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700/50")">
                        @i
                    </a>
                }
            }

            @if (Model.TrainingRatings.PageNumber < Model.TrainingRatings.TotalPages - 2)
            {
                <span class="w-10 h-10 flex items-center justify-center rounded-lg bg-white dark:bg-gray-800/30 border border-gray-300 dark:border-gray-600 text-gray-500 dark:text-blue-200">
                    ...
                </span>
            }

            <!-- Always show last page if different from first page -->
            @if (Model.TrainingRatings.TotalPages > 1)
            {
                <a asp-action="Index" asp-route-searchQuery="@Model.CurrentSearchQuery"
                   asp-route-ratingFilter="@Model.CurrentRatingFilter" asp-route-categoryFilter="@Model.CurrentCategoryFilter"
                   asp-route-page="@Model.TrainingRatings.TotalPages"
                   class="w-10 h-10 flex items-center justify-center rounded-lg transition-colors @(Model.TrainingRatings.TotalPages == Model.TrainingRatings.PageNumber ? "bg-[#1f7a8c] dark:bg-[#02465E] text-white" : "text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700/50")">
                    @Model.TrainingRatings.TotalPages
                </a>
            }

            <!-- Next Button -->
            <a asp-action="Index" asp-route-searchQuery="@Model.CurrentSearchQuery"
               asp-route-ratingFilter="@Model.CurrentRatingFilter" asp-route-categoryFilter="@Model.CurrentCategoryFilter"
               asp-route-page="@(Model.TrainingRatings.PageNumber + 1)"
               class="w-10 h-10 flex items-center justify-center rounded-lg border border-gray-300 dark:border-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700/50 transition-colors @(Model.TrainingRatings.HasNextPage ? "" : "opacity-50 pointer-events-none")">
                <svg class="w-5 h-5 text-gray-500 dark:text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </a>
        </div>
    }
</div>

<script>
    function clearRatingsSearchBar() {
        const searchInput = document.getElementById('ratingsSearchInput');
        searchInput.value = '';
        searchInput.dispatchEvent(new Event('input')); // Trigger the visibility change
    }

    function clearAllRatingsFilters() {
        window.location.href = '@Url.Action("Index", "TrainingRatings")';
    }
</script>

<style>
    /* Animation classes */
    .animate-fade-in {
        animation: fadeIn 0.6s ease-out forwards;
    }

    .animate-fade-in-down {
        animation: fadeInDown 0.6s ease-out forwards;
    }

    .animate-fade-in-up {
        animation: fadeInUp 0.6s ease-out forwards;
    }

    /* Keyframes */
    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>